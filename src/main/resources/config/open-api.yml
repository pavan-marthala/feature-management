openapi: 3.0.3
info:
  title: 'Feature Management API specification'
  description: |
    API for managing the feature flags, allowing controlled release and availability of features to users, allowing for more flexible and controlled deployment strategies.
    
    Features can be enabled or disabled based on different strategies like,
    <ul>
    <li>Boolean flags (toggles)</li>
    <li>User(s) based</li>
    <li>User role</li>
    <li>Time based (Schedule)</li>
    <li>Dynamic Expression</li>
    <li>HTTP header based</li>
    <li>HTTP request based</li>
    </ul>
    
    This specification supports most of the strategies mentioned above and provides flexibility to define custom strategies for specific use cases.

  version: 1.0.0
  contact:
    name: Feature Management
    email: sivarunreddy@gmail.com
    url: https://www.tech-sam.com/
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0.html
    name: Apache 2.0

tags:
  - name: Environment
    description: Manage feature environment
  - name: Feature
    description: Feature management
paths:
  /environments:
    post:
      tags:
        - Environment
      operationId: createEnvironment
      summary: Create environment
      description: |
        Create a new environment.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentRequest'
      responses:
        200:
          description: Environment created sucessfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Environment/properties/id'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
    get:
      tags:
        - Environment
      summary: Get all environments
      description: |
        Returns all the environments supported by the system.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: List of all environments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
        401:
          description: Unauthorized - Authentication required
  /environments/{id}:
    get:
      tags:
        - Environment
      summary: Get environment details by environment id
      description: |
        Returns environment details for environment
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: List of all environments
          headers:
            ETag:
              description: Entity tag for resource version
              schema:
                type: string
                example: '1'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        404:
          description: Environment does not exist
        401:
          description: Unauthorized - Authentication required
    patch:
      tags:
        - Environment
      summary: update the environment name and description
      description: |
        Update the existing environment name and description
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        description: |
          updates the environment name, description or both. Throws an error if the environment name already existing
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Environment/properties/name'
                description:
                  $ref: '#/components/schemas/Environment/properties/description'
      responses:
        204:
          description: Environment updated successfully
        400:
          description: Bad request
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Ennvironment does not exist
        409:
          description: Conflict – the resource has been modified by others
    delete:
      tags:
        - Environment
      summary: Remove the environment
      description: |
        Removes the environment.
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IfMatch'
      responses:
        204:
          description: Environment deleted successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Environment does not exist
        409:
          description: Conflict – the resource has been modified by others
  /environments/{id}/owners:
    post:
      tags:
        - Environment
      summary: add new owner to environment
      description: |
        Add a new owner to environment
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        204:
          description: Environment updated successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Environment does not exist
  /environments/{id}/owners/{ownerId}:
    delete:
      tags:
        - Environment
      summary: Remove owner from a environment
      description: |
        Remove owner to environment to manage the environment
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/IfMatch'
      responses:
        204:
          description: Owner deleted successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Environment or owner does not exist
        409:
          description: Conflict – the resource has been modified by others

  /features:
    post:
      tags:
        - Feature
      summary: Create feature
      description: |
        Creates a new feature
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      responses:
        200:
          description: Feature created sucessfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Feature/properties/id'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
    get:
      tags:
        - Feature
      summary: Get all features
      description: |
        Returns all available features.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: List of all features
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Feature'
        401:
          description: Unauthorized - Authentication required
  /features/strategies:
    get:
      tags:
        - Feature
      summary: Get all strategy types
      description: Get all strategy types
      responses:
        200:
          description: Lif of strategies
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      $ref: '#/components/schemas/FeatureStrategy'
                    description:
                      type: string
                      description: Strategy description
        401:
          description: Unauthorized - Authentication required
  /features/{id}:
    get:
      tags:
        - Feature
      summary: Get feature details
      description: |
        Returns tje featire details.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Feature details
          headers:
            ETag:
              description: Entity tag for resource version
              schema:
                type: string
                example: '1'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Feature does not exist
    patch:
      tags:
        - Feature
      summary: Update feature configuration
      description: |
        Updates the feature configuration
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                -  $ref: '#/components/schemas/BooleanFeatureStrategy'
            examples:
              BooleanFeature:
                summary: Feature toggle with boolean
                value:
                  value: false

      responses:
        204:
          description: Updated feature sucessfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Feature does not exist
        409:
          description: Conflict – the resource has been modified by others
    delete:
      tags:
        - Feature
      summary: Remove feature
      description: |
        Remove feature
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IfMatch'
      responses:
        204:
          description: Feature deleted successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Feature not exist
        409:
          description: Conflict – the resource has been modified by others
  /features/{id}/owners:
    post:
      tags:
        - Feature
      summary: add new owner to feature management
      description: |
        Add a new owner to feature
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        204:
          description: Owner added successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: feature does not exist
  /features/{id}/owners/{ownerId}:
    delete:
      tags:
        - Feature
      summary: Remove owner from a feature
      description: |
        Remove owner to manage the feature
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/OwnerId'
      responses:
        204:
          description: Owner deleted successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: feature or owner does not exist

components:
  schemas:
    ErrorDetails:
        type: object
        properties:
          errorCode:
            type: string
            description: application specific error code
            example: VE001
          field:
            type: string
            description: field name which caused the error
            example: name
          value:
            type: string
            description: field value
            example: de
          message:
            type: string
            description: Reason for the error
            example: name field require min 3 letters
        required:
          - field
          - message
    Error:
      type: object
      properties:
        httpMethod:
          type: string
          enum:
            - POST
            - PUT
            - PATCH
            - DELETE
            - GET
          description: HTTP error code
          example: POST
        requestUri:
          type: string
          description: URI path caused the error
          example: /environments
        statusCode:
          type: number
          description: HTTP status code
          example: 400
        errorMessage:
          type: string
          description: describing the error context
          example: validation error
        correlationIdentifier:
          type: string
          format: uuid
          description: correlation id to track the error
        errorTimestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp
          example: 2025-05-19T14:30:00Z
        detailedErrors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetails'

      required:
        - httpMethod
        - requestUri
        - statusCode
        - correlationIdentifier
        - errorTimestamp
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Present page number
          example: 1
        size:
          type: integer
          description: Number of items in the page
          example: 1
        totalItems:
          type: integer
          description: Total number of items
          example: 1
        totalPages:
          type: integer
          description: Total number of pages
          example: 1
    EnvironmentRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Environment/properties/name'
        description:
          $ref: '#/components/schemas/Environment/properties/description'
        owners:
          $ref: '#/components/schemas/Environment/properties/owners'
      anyOf:
        - required: [name]
        - required: [description]
        - required: [owners]
    EnvironmentResponse:
      allOf:
        - $ref: '#/components/schemas/Pagination'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Environment'

    Owner:
      type: string
      description: Owner id or name
      example: owner1
    Environment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the environment
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          description: Environment name
          example: Development
          minLength: 2
          maxLength: 36
          pattern: '^[a-zA-Z0-9]+$'
        description:
          type: string
          description: Environment description
          maxLength: 255
        owners:
          type: array
          description: Owners who can control the environment
          items:
            $ref: '#/components/schemas/Owner'
          minItems: 1
        etag:
          type: integer
          format: int64
          description: Entity tag for optimistic concurrency control
          example: 1

    FeatureStrategy:
      description: |
        List of supported feature strategies.
        <ul>
          <li><b>BooleanFeatureStrategy</b> - This strategy is used to work based on boolean values <i>true</i> or <i>false</i></li>
          <li><b>JWTClaimFeatureStrategy</b> - This strategy is used to work based on JWT claim key and value. </li>
          <li><b>HTTPRequestFeatureStrategy</b> - This strategy is used to work based on HTTP request. That could be a URL path, header or request body</li>
          <li><b>ScheduleFeatureStrategy</b> - This strategy is used to enable the feature only on the specific time</li>
          <li><b>ScriptEngineFeatureStrategy</b> - This strategy is used to enable or disable the feature based on dynamic conditions</li>
        </ul>
      type: string
      enum:
        - BooleanFeatureStrategy
        - JWTClaimFeatureStrategy
        - HTTPRequestFeatureStrategy
        - ScheduleFeatureStrategy
      example: BooleanFeatureStrategy
    BooleanFeatureStrategy:
      type: object
      description: |
        This strategy stores the feature value as either true or false.
      properties:
        value:
          type: boolean
          default: false
          example: false
        strategy:
          type: string
      required:
        - value
    JWTClaimFeatureStrategy:
      type: object
      properties:
        strategy:
          type: string
        value:
          type: object
          properties:
            claims:
              type: array
              items:
                oneOf:
                  - type: object
                    properties:
                      scopes:
                        type: array
                        items:
                          type: string
                    required:
                      - scopes
                  - type: object
                    properties:
                      roles:
                        type: array
                        items:
                          type: string
                    required:
                      - roles
                  - type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        value:
                          type: string
                      required:
                        - name
                        - value
          required:
            - claims
    HTTPRequestFeatureStrategy:
      type: object
      properties:
        strategy:
          type: string
        header:
          type: object
          properties:
            name:
              type: string
            value:
              type: string
          required:
            - name
            - value
        requestBody:
          type: object
          properties:
            path:
              type: string
            value:
              type: string
          required:
            - path
            - value
        query:
          type: object
          properties:
            name:
              type: string
            value:
              type: string
          required:
            - name
            - value
      anyOf:
        - required: [header]
        - required: [requestBody]
        - required: [query]
    ScheduleFeatureStrategy:
      type: object
      properties:
        strategy:
          type: string
        cron:
          type: string

    Feature:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Feature name
          example: NewFeature
          minLength: 2
          maxLength: 36
          pattern: '^[a-zA-Z0-9]+$'
        description:
          type: string
          description: Feature description
          maxLength: 255
        configuration:
          oneOf:
            - $ref: '#/components/schemas/BooleanFeatureStrategy'
            - $ref: '#/components/schemas/JWTClaimFeatureStrategy'
            - $ref: '#/components/schemas/HTTPRequestFeatureStrategy'
            - $ref: '#/components/schemas/ScheduleFeatureStrategy'
          discriminator:
            propertyName: strategy
        owners:
          type: array
          description: Owners who can manage the feature
          items:
            $ref: '#/components/schemas/Owner'
          minItems: 1
        enabled:
          type: boolean
          description: true of false to indicated the feature is enabled or not
          example: true
        etag:
          type: integer
          description: Entity tag for optimistic concurrency control
          example: 1
      required:
        - type
        - strategy
  parameters:
    Id:
      name: id
      in: path
      required: true
      description: Unique identifier
      schema:
        type: string
        format: uuid
    OwnerId:
      name: ownerId
      in: path
      required: true
      description: owner id
      schema:
        type: string
    Page:
      name: page
      in: query
      description: Page number (starting from 1)
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    size:
      name: size
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    IfMatch:
      name: If-Match
      in: header
      description: Version number (for optimistic concurrency control)
      required: true
      schema:
        type: integer
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []
