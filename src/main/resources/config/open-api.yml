openapi: 3.0.4
info:
  title: 'Feature Management API specification'
  description: |
    API for managing the feature flags, allowing controlled release and availability of features to users, allowing for more flexible and controlled deployment strategies.
    
    Features can be enabled or disabled based on different strategies like,
    <ul>
    <li>Boolean flags (toggles)</li>
    <li>User(s) based</li>
    <li>User role</li>
    <li>Time based (Schedule)</li>
    <li>Dynamic Expression</li>
    <li>HTTP header based</li>
    <li>Protocol based</li>
    <li>HTTP request based</li>
    </ul>
    
    This specification supports most of the strategies mentioned above and provides flexibility to define custom strategies for specific use cases.

  version: 1.0.0
  contact:
    name: Feature Management
    email: sivarunreddy@gmail.com
    url: https://www.tech-sam.com/
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0.html
    name: Apache 2.0
servers:
  - url: http://localhost:8080/
    description: Local
tags:
  - name: Environment
    description: Manage feature environment
  - name: Feature
    description: Feature management
  - name: Owner
    description: Owner management

paths:
  /environments:
    post:
      tags:
        - Environment
      summary: Create environment
      description: |
        Create a new environment.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentRequest'
      responses:
        200:
          description: Environment created sucessfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Environment/properties/id'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
    get:
      tags:
        - Environment
      summary: Get all environments
      description: |
        Returns all the environments supported by the system.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          description: List of all environments
          content:
            application/json:
              schema:
                allOf:
                  - $ref:  '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Environment'
        401:
          description: Unauthorized - Authentication required
  /environments/{id}:
    get:
      tags:
        - Environment
      summary: Get environment details by environment id
      description: |
        Returns environment details for environment
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Environment details
          headers:
            ETag:
              description: Entity tag for resource version
              schema:
                type: string
                example: '1'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        404:
          description: Environment does not exist
        401:
          description: Unauthorized - Authentication required
    patch:
      tags:
        - Environment
      summary: update the environment name and description
      description: |
        Update the existing environment name and description
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        description: |
          updates the environment name, description or both. Throws an error if the environment name already existing
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Environment/properties/name'
                description:
                  $ref: '#/components/schemas/Environment/properties/description'
      responses:
        204:
          description: Environment updated successfully
        400:
          description: Bad request
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Environment does not exist
        409:
          description: Conflict – the resource has been modified by others
    delete:
      tags:
        - Environment
      summary: Remove the environment
      description: |
        Removes the environment.
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IfMatch'
      responses:
        204:
          description: Environment deleted successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Environment does not exist
        409:
          description: Conflict – the resource has been modified by others
  /environments/{id}/owners:
    post:
      tags:
        - Environment
      summary: add new owner to environment
      description: |
        Add a new owner to environment
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerId:
                  type: integer
                  format: int64
                  description: Owner ID to add
              required:
                - ownerId
      responses:
        204:
          description: Environment updated successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Environment does not exist
  /environments/{id}/owners/{ownerId}:
    delete:
      tags:
        - Environment
      summary: Remove owner from a environment
      description: |
        Remove owner from environment
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/OwnerId'
        - $ref: '#/components/parameters/IfMatch'
      responses:
        204:
          description: Owner deleted successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Environment or owner does not exist
        409:
          description: Conflict – the resource has been modified by others
  /features:
    post:
      tags:
        - Feature
      summary: Create feature
      operationId: updatePet
      description: |
        Creates a new feature
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureRequest'
            examples:
              BooleanFeature:
                summary: Feature toggle with boolean
                value:
                  name: "enable-new-ui"
                  description: "Enable new user interface"
                  enabled: true
                  strategies:
                    - strategyType: "BOOLEAN"
                  owners:
                    - username: "john_doe"
                      email: "john.doe@example.com"
      responses:
        200:
          description: Feature created sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
    get:
      tags:
        - Feature
      summary: Get all features
      description: |
        Returns all available features.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/shortOrder'
        - $ref: '#/components/parameters/featureShorting'
      responses:
        200:
          description: List of all features
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Feature'
        401:
          description: Unauthorized - Authentication required
  /features/{id}:
    get:
      tags:
        - Feature
      summary: Get feature details
      description: |
        Returns the feature details.
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Feature details
          headers:
            ETag:
              description: Entity tag for resource version
              schema:
                type: string
                example: '1'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
        401:
          description: Unauthorized - Authentication required
        404:
          description: Feature does not exist
    patch:
      tags:
        - Feature
      summary: Update feature configuration
      description: |
        Updates the feature configuration
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Feature/properties/name'
                description:
                  $ref: '#/components/schemas/Feature/properties/description'
                enabled:
                  $ref: '#/components/schemas/Feature/properties/enabled'
            examples:
              UpdateFeature:
                summary: Update feature properties
                value:
                  enabled: false
                  description: "Updated description"

      responses:
        204:
          description: Updated feature sucessfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Feature does not exist
        409:
          description: Conflict – the resource has been modified by others
    delete:
      tags:
        - Feature
      summary: Remove feature
      description: |
        Remove feature
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/IfMatch'
      responses:
        204:
          description: Feature deleted successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: Feature does not exist
        409:
          description: Conflict – the resource has been modified by others
  /features/{id}/owners:
    post:
      tags:
        - Feature
      summary: add new owner to feature management
      description: |
        Add a new owner to feature
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerId:
                  type: integer
                  format: int64
                  description: Owner ID to add
              required:
                - ownerId
      responses:
        204:
          description: Owner added successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: feature does not exist
  /features/{id}/owners/{ownerId}:
    delete:
      tags:
        - Feature
      summary: Remove owner from a feature
      description: |
        Remove owner from feature management
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/OwnerId'
      responses:
        204:
          description: Owner deleted successfully
        401:
          description: Unauthorized - Authentication required
        403:
          description: Access forbidden - Permission required
        404:
          description: feature or owner does not exist
components:
  schemas:
    Error:
      type: object
      properties:
        httpMethod:
          type: string
          enum:
            - POST
            - PUT
            - PATCH
            - GET
            - DELETE
          description: HTTP method
          example: POST
        requestUri:
          type: string
          description: URI path that caused the error
          example: /environments
        statusCode:
          type: number
          description: HTTP status code
          example: 400
        errorMessage:
          type: string
          description: describing the error context
          example: validation error
        correlationIdentifier:
          type: string
          format: uuid
          description: correlation id to track the error
        errorTimestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp
          example: 2025-05-19T14:30:00Z
        detailedErrors:
          type: array
          items:
            type: object
            properties:
              errorCode:
                type: string
                description: application specific error code
                example: VE001
              field:
                type: string
                description: field name which caused the error
                example: name
              value:
                type: string
                description: field value
                example: de
              message:
                type: string
                description: Reason for the error
                example: name field requires min 3 letters
            required:
              - field
              - message
      required:
        - httpMethod
        - requestUri
        - statusCode
        - correlationIdentifier
        - errorTimestamp
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Present page number
          example: 1
        size:
          type: integer
          description: Number of items in the page
          example: 1
        totalItems:
          type: integer
          description: Total number of items
          example: 1
        totalPages:
          type: integer
          description: Total number of pages
          example: 1
    EnvironmentRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Environment/properties/name'
        description:
          $ref: '#/components/schemas/Environment/properties/description'
      anyOf:
        - required: [name]
        - required: [description]
    Owner:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the owner
          example: 1
        username:
          type: string
          description: Owner username
          example: "john_doe"
        email:
          type: string
          format: email
          description: Owner email address
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          description: When the owner was created
          readOnly: true
          example: "2025-05-19T14:30:00Z"
        modifiedAt:
          type: string
          format: date-time
          description: When the owner was last modified
          readOnly: true
          example: "2025-05-19T14:30:00Z"
      required:
        - email
    Environment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the environment
          readOnly: true
          example: 1
        name:
          type: string
          description: Environment name
          example: Development
          minLength: 2
          maxLength: 36
          pattern: '^[a-zA-Z0-9]+$'
        description:
          type: string
          description: Environment description
          maxLength: 255
        owners:
          type: array
          description: Owners who can control the environment
          items:
            $ref: '#/components/schemas/Owner'
          minItems: 1
        createdAt:
          type: string
          format: date-time
          description: When the environment was created
          readOnly: true
          example: "2025-05-19T14:30:00Z"
        modifiedAt:
          type: string
          format: date-time
          description: When the environment was last modified
          readOnly: true
          example: "2025-05-19T14:30:00Z"
    StrategyType:
      type: string
      description: |
        List of supported feature strategies.
        <ul>
          <li><b>BOOLEAN</b> - This strategy is used to work based on boolean values <i>true</i> or <i>false</i></li>
          <li><b>JWT_CLAIM</b> - This strategy is used to work based on JWT claim key and value. </li>
          <li><b>HTTP_REQUEST</b> - This strategy is used to work based on HTTP request. That could be a URL path, header or request body</li>
          <li><b>SCHEDULE</b> - This strategy is used to enable the feature only on the specific time</li>
          <li><b>SCRIPT_ENGINE</b> - This strategy is used to enable or disable the feature based on dynamic conditions</li>
        </ul>
      enum:
        - BOOLEAN
        - JWT_CLAIM
        - HTTP_REQUEST
        - SCHEDULE
        - SCRIPT_ENGINE
      example: BOOLEAN
    FeatureStrategy:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the strategy
          readOnly: true
          example: 1
        strategyType:
          $ref: '#/components/schemas/StrategyType'
        createdAt:
          type: string
          format: date-time
          description: When the strategy was created
          readOnly: true
          example: "2025-05-19T14:30:00Z"
        modifiedAt:
          type: string
          format: date-time
          description: When the strategy was last modified
          readOnly: true
          example: "2025-05-19T14:30:00Z"
      required:
        - strategyType
    Feature:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the feature
          readOnly: true
          example: 1
        name:
          type: string
          description: Feature name
          example: "enable-new-ui"
          minLength: 2
          maxLength: 100
        description:
          type: string
          description: Feature description
          maxLength: 500
          example: "Enable the new user interface"
        enabled:
          type: boolean
          description: true or false to indicate if the feature is enabled or not
          example: true
          default: false
        environment:
          $ref: '#/components/schemas/Environment'
        strategies:
          type: array
          description: List of strategies associated with this feature
          items:
            $ref: '#/components/schemas/FeatureStrategy'
        owners:
          type: array
          description: Owners who can manage the feature
          items:
            $ref: '#/components/schemas/Owner'
          minItems: 1
        createdAt:
          type: string
          format: date-time
          description: When the feature was created
          readOnly: true
          example: "2025-05-19T14:30:00Z"
        modifiedAt:
          type: string
          format: date-time
          description: When the feature was last modified
          readOnly: true
          example: "2025-05-19T14:30:00Z"
      required:
        - name
        - enabled
    FeatureRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Feature/properties/name'
        description:
          $ref: '#/components/schemas/Feature/properties/description'
        enabled:
          $ref: '#/components/schemas/Feature/properties/enabled'
        owners:
          type: array
          items:
            type: object
            properties:
              username:
                $ref: '#/components/schemas/Owner/properties/username'
              email:
                $ref: '#/components/schemas/Owner/properties/email'
            required:
              - username
              - email
        strategies:
          type: array
          items:
            type: object
            properties:
              strategyType:
                $ref: '#/components/schemas/StrategyType'
            required:
              - strategyType
      required:
        - name
        - enabled
        - strategies
  parameters:
    Id:
      name: id
      in: path
      required: true
      description: Unique identifier
      schema:
        type: integer
        format: int64
    OwnerId:
      name: ownerId
      in: path
      required: true
      description: owner id
      schema:
        type: integer
        format: int64
    Page:
      name: page
      in: query
      description: Page number (starting from 1)
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    size:
      name: size
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    shortOrder:
      name: short
      in: query
      description: Sorting order; use 'asc' for ascending or 'desc' for descending.
      required: false
      schema:
        type: string
        default: desc
    featureShorting:
      name: shortBy
      in: query
      description: Field name to sort the results by (e.g., 'id', 'name', 'createdAt').
      required: false
      schema:
        type: string
        default: id
    IfMatch:
      name: If-Match
      in: header
      description: Version number (for optimistic concurrency control)
      required: true
      schema:
        type: integer
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []